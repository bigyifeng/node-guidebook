(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{300:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http-serverresponse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-serverresponse"}},[t._v("#")]),t._v(" HTTP ServerResponse")]),t._v(" "),e("p",[t._v("http.ServerResponse 对象由 HTTP 服务器在内部创建，而不是由用户创建。它作为第二个参数传入 "),e("code",[t._v("'request'")]),t._v(" 事件。")]),t._v(" "),e("p",[t._v("该对象实现继承自流。")]),t._v(" "),e("h2",{attrs:{id:"监听事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监听事件"}},[t._v("#")]),t._v(" 监听事件")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("事件")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("close")]),t._v(" "),e("td",[e("code",[t._v("response.end()")]),t._v(" 被调用前，连接就断开了。此时会触发这个事件。")])]),t._v(" "),e("tr",[e("td",[t._v("finish")]),t._v(" "),e("td",[t._v("响应头和主体的最后一段已经切换到操作系统以通过网络传输发送，并不意味着客户端已经收到消息。")])])])]),t._v(" "),e("h2",{attrs:{id:"状态描述信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态描述信息"}},[t._v("#")]),t._v(" 状态描述信息")]),t._v(" "),e("p",[t._v("响应请求对象必须包含响应状态码和状态描述信息。通过以下几个方法设置：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("response.statusCode")]),t._v(" "),e("td",[t._v("表示刷新响应头发送到客户端的状态码")])]),t._v(" "),e("tr",[e("td",[t._v("response.statusMessage")]),t._v(" "),e("td",[t._v("表示刷新响应头发送到客户端的状态消息")])]),t._v(" "),e("tr",[e("td",[t._v("response.writeHead")]),t._v(" "),e("td",[t._v("设置响应头（包括状态码和状态描述信息）")])])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置响应状态码")]),t._v("\nres"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusCode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置响应状态描述信息")]),t._v("\nres"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusMessage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ok'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("两者差不多，差异点在于")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("res.writeHead()")]),t._v(" 可以提供额外的功能，比如设置响应头部。")]),t._v(" "),e("li",[t._v("当响应头部发送出去后，"),e("code",[t._v("res.statusCode")]),t._v(" 和 "),e("code",[t._v("res.statusMessage")]),t._v(" 会被设置成已发送出去的状态代码和状态描述信息。")])]),t._v(" "),e("h2",{attrs:{id:"响应头部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应头部"}},[t._v("#")]),t._v(" 响应头部")]),t._v(" "),e("p",[t._v("使用以下方法可以对响应头部进行修改等操作：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("response.writeHead(statusCode[, statusMessage][, headers])")])]),t._v(" "),e("td",[t._v("设置响应头，包括状态码、状态描述信息和头部字段")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("response.setHeader(name, value)")])]),t._v(" "),e("td",[t._v("为隐式响应头设置单个响应头的值")])]),t._v(" "),e("tr",[e("td",[t._v("response.removeHeader")]),t._v(" "),e("td",[t._v("移除排队等候中的隐式发送的响应头")])]),t._v(" "),e("tr",[e("td",[t._v("response.getHeader")]),t._v(" "),e("td",[t._v("读取已排队但未发送到客户端的响应头")])]),t._v(" "),e("tr",[e("td",[t._v("response.getHeaderNames")]),t._v(" "),e("td",[t._v("读取响应头名称")])]),t._v(" "),e("tr",[e("td",[t._v("response.getHeaders")]),t._v(" "),e("td",[t._v("读取已传出的响应头的浅拷贝")])]),t._v(" "),e("tr",[e("td",[t._v("response.hasHeader")]),t._v(" "),e("td",[t._v("判断是否设置了指定的响应头字段")])])])]),t._v(" "),e("h3",{attrs:{id:"response-writehead"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-writehead"}},[t._v("#")]),t._v(" response.writeHead")]),t._v(" "),e("p",[t._v("向请求发送响应头。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statusCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" statusMessage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[e("p",[t._v("此方法只能在响应对象中调用一次，并且必须在调用 "),e("code",[t._v("response.end()")]),t._v(" 之前调用")])]),t._v(" "),e("li",[e("p",[t._v("如果在调用此方法之前调用了 "),e("code",[t._v("response.write()")]),t._v(" 或 "),e("code",[t._v("response.end()")]),t._v("，则将计算隐式或可变的响应头并调用此函数。")])]),t._v(" "),e("li",[e("p",[t._v("当使用 "),e("code",[t._v("response.setHeader()")]),t._v(" 设置响应头时，则与传给 "),e("code",[t._v("response.writeHead()")]),t._v(" 的任何响应头合并，且 "),e("code",[t._v("response.writeHead()")]),t._v(" 的优先。")])]),t._v(" "),e("li",[e("p",[t._v("如果调用此方法并且尚未调用 "),e("code",[t._v("response.setHeader()")]),t._v("，则直接将提供的响应头值写入网络通道而不在内部进行缓存，响应头上的 "),e("code",[t._v("response.getHeader()")]),t._v(" 将不会产生预期的结果。 如果需要渐进的响应头填充以及将来可能的检索和修改，则改用 "),e("code",[t._v("response.setHeader()")]),t._v("。")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" body "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Buffer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("byteLength")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("⚠️ "),e("strong",[t._v("注意")]),t._v("：添加和移除响应头的顺序可以随意，但一定要在调用 "),e("code",[t._v("res.write()")]),t._v(" 和 "),e("code",[t._v("res.end()")]),t._v(" 之前。")]),t._v(" "),e("h3",{attrs:{id:"增删改查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增删改查"}},[t._v("#")]),t._v(" 增删改查")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 增")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'content-type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("此外，还有不那么常用的：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("response.headersSent")]),t._v("：表示 header 是否已经发送")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("response.sendDate")]),t._v("：默认为 "),e("code",[t._v("true")]),t._v("。但为 "),e("code",[t._v("true")]),t._v(" 时，会在 response header 里自动设置 Date 首部")])]),t._v(" "),e("h2",{attrs:{id:"响应主体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应主体"}},[t._v("#")]),t._v(" 响应主体")]),t._v(" "),e("p",[t._v("主要用到 "),e("code",[t._v("res.write()")]),t._v(" 以及 "),e("code",[t._v("res.end()")]),t._v(" 两个方法。")]),t._v(" "),e("p",[e("code",[t._v("res.write()")]),t._v(" API 的信息量略大，建议看下官方文档。")]),t._v(" "),e("h3",{attrs:{id:"response-write"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-write"}},[t._v("#")]),t._v(" response.write")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("如果调用此方法并且尚未调用 "),e("code",[t._v("response.writeHead()")]),t._v("，则将切换到隐式响应头模式并刷新隐式响应头。")]),t._v(" "),e("li",[t._v("可以多次调用该方法以提供连续的响应主体片段。")]),t._v(" "),e("li",[t._v("chunk 可以是 String 或 Buffer。如果 chunk 是一个字符串，则第二个参数指定如何将其编码为字节流。")])]),t._v(" "),e("p",[t._v("⚠️ "),e("strong",[t._v("注意")]),t._v("：在 http 模块中，当请求时 HEAD 请求时，则省略响应主体。同样，204 和 304 响应不得包含消息主体。")]),t._v(" "),e("p",[t._v("第一次调用 "),e("code",[t._v("response.write()")]),t._v(" 时，它会将缓冲的响应头信息和主体的第一个数据块发送给客户端。 第二次调用 "),e("code",[t._v("response.write()")]),t._v(" 时，Node.js 假定数据将被流式传输，并分别发送新数据。 也就是说，响应被缓冲到主体的第一个数据块。")]),t._v(" "),e("p",[t._v("如果将整个数据成功刷新到内核缓冲区，则返回 "),e("code",[t._v("true")]),t._v("。 如果全部或部分数据在用户内存中排队，则返回 "),e("code",[t._v("false")]),t._v("。 当缓冲区再次空闲时，则触发 "),e("code",[t._v("'drain'")]),t._v(" 事件。")]),t._v(" "),e("h3",{attrs:{id:"response-end"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-end"}},[t._v("#")]),t._v(" response.end")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("完成响应请求并返回客户端。")]),t._v(" "),e("p",[t._v("有点像个语法糖，可以看成下面两个调用的组合。至于 callback，当响应传递结束后触发。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"其他方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他方法"}},[t._v("#")]),t._v(" 其他方法")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("response.finished")]),t._v("：是否响应结束")]),t._v(" "),e("li",[e("code",[t._v("response.sendDate")]),t._v("：是否自动设置 Date 头部（默认是 "),e("code",[t._v("true")]),t._v("）。（按 HTTP 协议是必须要的，除非是调试用，不然不要设置为 "),e("code",[t._v("false")]),t._v("）")]),t._v(" "),e("li",[e("code",[t._v("response.headersSent")]),t._v("：响应头部是否已发送（只读属性）。")]),t._v(" "),e("li",[e("code",[t._v("response.writeContinue()")]),t._v("：发送 HTTP/1.1 100 Continue 消息给客户端，提示说服务端愿意接受客户端的请求，请继续发送请求正文（body)。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);