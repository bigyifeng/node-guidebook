(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{205:function(t,s,a){t.exports=a.p+"assets/img/network-diagram.4e675e4e.jpg"},206:function(t,s,a){t.exports=a.p+"assets/img/http-architect.40754fda.jpg"},296:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"http"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),n("p",[t._v("Node 的 http 模块包含对 HTTP 处理的封装。在 Node 中，HTTP 服务继承自 TCP 服务器（"),n("router-link",{attrs:{to:"/network/net.html"}},[t._v("net 模块")]),t._v("），它能够与多个客户端保持连接，由于其采用事件驱动的形式，并不为每一个连接创建额外的线程或进程，保持很低的内存占用，所以能实现高并发。HTTP 服务与 TCP 服务模型有区别的地方在于，在开启 keepalive 后，一个 TCP 会话可以用于多次请求和响应。TCP 服务以 connection 为单位进行服务，HTTP 服务以 request 为单位进行服务。http 模块即是将 connection 到 request 的过程进行了封装。")],1),t._v(" "),n("p",[t._v("Node.js 采用的网络请求处理模型是 I/O 多路复用，与传统的主从多线程并发模型区别：")]),t._v(" "),n("ul",[n("li",[t._v("只使用有限的线程数（1 个），所以占用系统资源很少")]),t._v(" "),n("li",[t._v("操作系统级的异步 I/O 支持，可以减少用户态/内核态切换，并且本身性能更高（因为直接与网卡驱动交互）")]),t._v(" "),n("li",[t._v("JavaScript 天生具有保护程序执行现场的能力（闭包），传统模型要么依赖应用程序自己保存现场，或者依赖线程切换时自动完成")])]),t._v(" "),n("h2",{attrs:{id:"http-createserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-createserver"}},[t._v("#")]),t._v(" http.createServer")]),t._v(" "),n("p",[t._v("通过 "),n("code",[t._v("http.createServer")]),t._v(" 工厂方法可以创建一个 HTTP 服务器，返回 "),n("code",[t._v("http.Server")]),t._v(" 对象实例，该实例继承自 "),n("code",[t._v("net.Server")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("requestListener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("事实上，HTTP 协议确实是基于 TCP 协议实现的。")]),t._v(" "),n("p",[t._v("craeteServer 的可选参数 requestListener 用于监听 request 事件；另外，它也监听 connection 事件，只不过回调函数是 "),n("code",[t._v("http.Server")]),t._v(" 自己实现的。然后调用 listen 让 "),n("code",[t._v("http.Server")]),t._v(" 对象在端口 3333 上监听连接请求并最终创建 TCP 对象，由 "),n("code",[t._v("tcp_wrap.h")]),t._v(" 实现。最后会调用 TCP 对象的 listen 方法，这才是真正在指定端口开始提供服务。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(205),alt:"network diagram"}})]),t._v(" "),n("p",[t._v("涉及到 C++的类大多是对 libuv 做了一层包装并公布给 JavaScript，所以不在这里特别列出。我们有必要提 "),n("code",[t._v("http-parser")]),t._v("，它是用来解析 HTTP 请求/响应消息的，本身十分高效：没有任何系统调用，没有内存分配操作，纯 C 实现。")]),t._v(" "),n("h2",{attrs:{id:"发送请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发送请求"}},[t._v("#")]),t._v(" 发送请求")]),t._v(" "),n("p",[t._v("http 模块可以通过 "),n("code",[t._v("get")]),t._v(" 和 "),n("code",[t._v("request")]),t._v(" 方法发送 HTTP 请求。")]),t._v(" "),n("h3",{attrs:{id:"http-get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-get"}},[t._v("#")]),t._v(" http.get")]),t._v(" "),n("p",[n("code",[t._v("http.get")]),t._v(" 方法主要用于发出 GET 请求。")]),t._v(" "),n("p",[t._v("由于大多数请求都是没有主体的 GET 请求，所以 Node.js 提供了这个便捷的方法。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nhttp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("这个方法与 "),n("code",[t._v("http.request")]),t._v(" 方法的区别在于，它将方法设置为 GET 并自动调用 "),n("code",[t._v("req.end()")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("callback")]),t._v(" 调用时只有一个参数，该参数是 "),n("router-link",{attrs:{to:"/network/http-incoming-message.html"}},[t._v("http.IncomingMessage")]),t._v(" 的实例。")],1),t._v(" "),n("h3",{attrs:{id:"http-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-request"}},[t._v("#")]),t._v(" http.request")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nhttp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("配置对象 options 属性：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("属性")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("protocol")]),t._v(" "),n("td",[t._v("使用协议")]),t._v(" "),n("td",[n("code",[t._v("'http'")])])]),t._v(" "),n("tr",[n("td",[t._v("host")]),t._v(" "),n("td",[t._v("请求发送至的服务器的域名或 IP 地址")]),t._v(" "),n("td",[n("code",[t._v("'localhost'")])])]),t._v(" "),n("tr",[n("td",[t._v("hostname")]),t._v(" "),n("td",[t._v("host 的别名")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("family")]),t._v(" "),n("td",[t._v("IP 地址族（有效值为 4 或 6）")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("port")]),t._v(" "),n("td",[t._v("远程服务器的端口")]),t._v(" "),n("td",[t._v("80")])]),t._v(" "),n("tr",[n("td",[t._v("localAddress")]),t._v(" "),n("td",[t._v("为网络连接绑定的本地接口")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("socketPath")]),t._v(" "),n("td",[t._v("Unix 域套接字")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("method")]),t._v(" "),n("td",[t._v("HTTP 请求方法")]),t._v(" "),n("td",[n("code",[t._v("'GET'")])])]),t._v(" "),n("tr",[n("td",[t._v("path")]),t._v(" "),n("td",[t._v("请求路径")]),t._v(" "),n("td",[n("code",[t._v("'/'")])])]),t._v(" "),n("tr",[n("td",[t._v("headers")]),t._v(" "),n("td",[t._v("包含请求头的对象")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("auth")]),t._v(" "),n("td",[t._v("基本的身份验证")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("agent")]),t._v(" "),n("td",[t._v("控制 Agent 的行为")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("createConnection")]),t._v(" "),n("td",[t._v("当 agent 未使用时，用来为请求生成套接字或流的函数")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("timeout")]),t._v(" "),n("td",[t._v("指定套接字超时的数值")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("setHost")]),t._v(" "),n("td",[t._v("是否自动添加 Host 请求头")]),t._v(" "),n("td",[t._v("true")])])])]),t._v(" "),n("p",[t._v("参数 "),n("code",[t._v("url")]),t._v(" 可以是字符串或 URL 对象。")]),t._v(" "),n("ul",[n("li",[t._v("如果是字符串，则会自动使用 "),n("code",[t._v("url.parse()")]),t._v(" 解析")]),t._v(" "),n("li",[t._v("如果是 URL 对象，则会自动转换为普通的 "),n("code",[t._v("options")]),t._v(" 对象")])]),t._v(" "),n("p",[t._v("如果同时制定了 "),n("code",[t._v("url")]),t._v(" 和 "),n("code",[t._v("options")]),t._v("，则对象会被合并，其中 "),n("code",[t._v("options")]),t._v(" 属性优先。")]),t._v(" "),n("p",[t._v("可选的 "),n("code",[t._v("callback")]),t._v(" 参数会作为单次监听器被添加到 "),n("code",[t._v("response")]),t._v(" 事件中。")]),t._v(" "),n("p",[n("code",[t._v("http.request()")]),t._v(" 放回 "),n("router-link",{attrs:{to:"/network/http-client-request.html"}},[t._v("http.ClientRequest")]),t._v(" 类的实例。ClientRequest 实例是一个可写流。如果需要时哟功能 POST 请求上传文件，则写入 ClientRequest 对象。")],1),t._v(" "),n("h2",{attrs:{id:"http-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-类"}},[t._v("#")]),t._v(" HTTP 类")]),t._v(" "),n("p",[n("img",{attrs:{src:a(206),alt:"HTTP Architect"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("http.Agent")]),t._v("：负责管理 HTTP 客户端的连接持久性和重用")]),t._v(" "),n("li",[n("code",[t._v("http.ClientRequest")]),t._v("：用于向服务端发起请求，由 "),n("code",[t._v("http.request")]),t._v(" 内部创建并返回，表示正在进行的请求，且其请求头已进入队列")]),t._v(" "),n("li",[n("code",[t._v("http.Server")]),t._v("：用于提供 HTTP 服务，处理客户端的请求")]),t._v(" "),n("li",[n("code",[t._v("http.ServerResponse")]),t._v("：由 HTTP 服务器在内部创建，而不是由用户创建")]),t._v(" "),n("li",[n("code",[t._v("http.IncomingMessage")]),t._v("：用于访问响应状态、消息头以及数据")])]),t._v(" "),n("h3",{attrs:{id:"http-clientrequest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-clientrequest"}},[t._v("#")]),t._v(" http.ClientRequest")]),t._v(" "),n("p",[t._v("HTTP 客户端")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" client "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://127.0.0.1:3000'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("code",[t._v("http.ClientRequest")]),t._v(" 内部创建了一个 Socket 来发起请求。")]),t._v(" "),n("p",[t._v("当你调用 "),n("code",[t._v("http.request(options)")]),t._v(" 时，内部是这样的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onSocket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"http-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-server"}},[t._v("#")]),t._v(" http.Server")]),t._v(" "),n("p",[t._v("Web 服务器")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pathname "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("http.Server")]),t._v(" 继承了 "),n("code",[t._v("net.Server")])]),t._v(" "),n("li",[n("code",[t._v("net.createServer(fn)")]),t._v(" 回调中的 "),n("code",[t._v("socket")]),t._v(" 是个双工的 "),n("code",[t._v("stream")]),t._v(" 接口，也就是说，读取发送方信息、向发送方发送信息都靠它实现")])]),t._v(" "),n("p",[t._v("🌰 "),n("strong",[t._v("标准示例：")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参考：https://cnodejs.org/topic/4fb1c1fd1975fe1e1310490b")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" net "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'net'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8989")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Connected: '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remoteAddress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remotePort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DATA '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remoteAddress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("': '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Data is: '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Data from you is  \"'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CLOSED: '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remoteAddress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remotePort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("h3",{attrs:{id:"http-incomingmessage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-incomingmessage"}},[t._v("#")]),t._v(" http.IncomingMessage")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/nodejs/node/blob/master/lib/_http_incoming.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("http.IncomingMessage"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("获取请求方发送的信息，比如：请求方法、路径、传递的数据等。")]),t._v(" "),n("ul",[n("li",[t._v("在 Server 端和 Client 端都会出现")])]),t._v(" "),n("p",[t._v("三个需要注意的属性：")]),t._v(" "),n("ul",[n("li",[t._v("method：只在 Server 端实例中有")]),t._v(" "),n("li",[t._v("statusCode：只在 Client 端实例中有")]),t._v(" "),n("li",[t._v("statusMessage：只在 Client 端实例中有")])]),t._v(" "),n("h3",{attrs:{id:"http-serverresponse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-serverresponse"}},[t._v("#")]),t._v(" http.ServerResponse")]),t._v(" "),n("p",[t._v("实现了 Writable Stream interface，内部也是通过 Socket 来发送信息。")]),t._v(" "),n("hr"),t._v(" "),n("p",[n("strong",[t._v("参考资料：")])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5965bb26f265da6c204195b3",target:"_blank",rel:"noopener noreferrer"}},[t._v("走进 Node.js 之 HTTP 实现分析"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);