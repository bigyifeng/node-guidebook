(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{323:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"模式类型-schematypes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式类型-schematypes"}},[t._v("#")]),t._v(" 模式类型 SchemaTypes")]),t._v(" "),a("p",[t._v("处理字段路径各种属性定义。")]),t._v(" "),a("h2",{attrs:{id:"合法类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合法类型"}},[t._v("#")]),t._v(" 合法类型")]),t._v(" "),a("ul",[a("li",[t._v("String 字符串")]),t._v(" "),a("li",[t._v("Number 数字")]),t._v(" "),a("li",[t._v("Date 日期")]),t._v(" "),a("li",[t._v("Buffer 二进制")]),t._v(" "),a("li",[t._v("Boolean 布尔值")]),t._v(" "),a("li",[t._v("Mixed 混合类型")]),t._v(" "),a("li",[t._v("ObjectId 对象 ID")]),t._v(" "),a("li",[t._v("Array 数组")]),t._v(" "),a("li",[t._v("Decimal128")])]),t._v(" "),a("h2",{attrs:{id:"选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[t._v("#")]),t._v(" 选项")]),t._v(" "),a("p",[t._v("你可以直接声明 schema type 为某一种 type，或者赋值一个含有 "),a("code",[t._v("type")]),t._v(" 属性的对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" schema1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `test` is a path of type String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" schema2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `test` is a path of type string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("除了 type 属性，你还可以对这个字段路径指定其他属性。 如果你要在保存之前要把字母都改成小写：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" schema2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    lowercase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Always convert `test` to lowercase")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"全部可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全部可用"}},[t._v("#")]),t._v(" 全部可用")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("required")]),t._v("：布尔值或函数，如果值为真，为此属性添加 required 验证器")]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v("：任何值或函数，设置此路径默认值。如果是函数，函数返回值为默认值")]),t._v(" "),a("li",[a("code",[t._v("select")]),t._v("：布尔值，指定 query 的默认 projections")]),t._v(" "),a("li",[a("code",[t._v("validate")]),t._v("：函数 adds a validator function for this property")]),t._v(" "),a("li",[a("code",[t._v("get")]),t._v("：函数使用 "),a("code",[t._v("Object.defineProperty()")]),t._v(" 定义自定义 getter")]),t._v(" "),a("li",[a("code",[t._v("set")]),t._v("：函数使用 "),a("code",[t._v("Object.defineProperty()")]),t._v(" 定义自定义 setter")]),t._v(" "),a("li",[a("code",[t._v("alias")]),t._v("：字符串仅 mongoose >= 4.10.0，为该字段路径定义虚拟值 gets/sets")])]),t._v(" "),a("h3",{attrs:{id:"索引相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引相关"}},[t._v("#")]),t._v(" 索引相关")]),t._v(" "),a("p",[t._v("你可以使用 Schema Type 选项定义 MongoDB Indexes")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("index")]),t._v("：布尔值，是否对这个属性创建索引")]),t._v(" "),a("li",[a("code",[t._v("unique")]),t._v("：布尔值，是否对这个属性创建唯一索引")]),t._v(" "),a("li",[a("code",[t._v("sparse")]),t._v("：布尔值，是否对这个属性创建稀疏索引")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Schema")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    unique"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unique index. If you specify `unique: true`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// specifying `index: true` is optional if you do `unique: true`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("lowercase")]),t._v(": 布尔值，是否在保存前对此值调用 "),a("code",[t._v(".toLowerCase()")])]),t._v(" "),a("li",[a("code",[t._v("uppercase")]),t._v(": 布尔值，是否在保存前对此值调用 "),a("code",[t._v(".toUpperCase()")])]),t._v(" "),a("li",[a("code",[t._v("trim")]),t._v(": 布尔值，是否在保存前对此值调用 "),a("code",[t._v(".trim()")])]),t._v(" "),a("li",[a("code",[t._v("match")]),t._v(": 正则表达式，创建验证器检查这个值是否匹配给定正则表达式")]),t._v(" "),a("li",[a("code",[t._v("enum")]),t._v(": 数组，创建验证器检查这个值是否包含于给定数组")])]),t._v(" "),a("h3",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("min")]),t._v(": 数值，创建验证器检查属性是否大于或等于该值")]),t._v(" "),a("li",[a("code",[t._v("max")]),t._v(": 数值，创建验证器检查属性是否小于或等于该值")])]),t._v(" "),a("h3",{attrs:{id:"date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("min")]),t._v(": Date")]),t._v(" "),a("li",[a("code",[t._v("max")]),t._v(": Date")])])])}),[],!1,null,null,null);s.default=n.exports}}]);