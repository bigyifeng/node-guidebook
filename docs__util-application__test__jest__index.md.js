(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[94],{iL08:function(e,t,n){"use strict";n.r(t);var a=n("q1tI"),l=n.n(a),r=(n("B2uJ"),n("+su7"),n("qOys")),s=n.n(r);n("5Yjd");t["default"]=function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"markdown"},l.a.createElement("h1",{id:"jest"},l.a.createElement("a",{"aria-hidden":"true",href:"#jest"},l.a.createElement("span",{className:"icon icon-link"})),"Jest"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("p",null,"Matchers \u5339\u914d\u5668")),l.a.createElement("li",null,l.a.createElement("p",null,"IDE")),l.a.createElement("li",null,l.a.createElement("p",null,"Linting")),l.a.createElement("li",null,l.a.createElement("p",null,"Runners")),l.a.createElement("li",null,l.a.createElement("p",null,"Reporters")),l.a.createElement("li",null,l.a.createElement("p",null,"Results Processors")),l.a.createElement("li",null,l.a.createElement("p",null,"Environments")),l.a.createElement("li",null,l.a.createElement("p",null,"Snapshot")),l.a.createElement("li",null,l.a.createElement("p",null,"Migration")),l.a.createElement("li",null,l.a.createElement("p",null,"Library extensions")),l.a.createElement("li",null,l.a.createElement("p",null,"Mocks")),l.a.createElement("li",null,l.a.createElement("p",null,"Watch Plugins")),l.a.createElement("li",null,l.a.createElement("p",null,"Processor")),l.a.createElement("li",null,l.a.createElement("p",null,"Presets")),l.a.createElement("li",null,l.a.createElement("p",null,l.a.createElement("code",null,"test")," \u65b9\u6cd5\uff1aJest \u5c01\u88c5\u7684\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u4e00\u822c\u586b\u5199\u4e24\u4e2a\u53c2\u6570\uff0c\u6d4b\u8bd5\u7528\u4f8b\u63cf\u8ff0\u548c\u6d4b\u8bd5\u65b9\u6cd5")),l.a.createElement("li",null,l.a.createElement("p",null,l.a.createElement("code",null,"expect")," \u65b9\u6cd5\uff1a\u9884\u671f\u65b9\u6cd5\uff0c\u5c31\u662f\u4f60\u8c03\u7528\u4e86\u4ec0\u4e48\u65b9\u6cd5\uff0c\u4f20\u9012\u4e86\u4ec0\u4e48\u53c2\u6570\uff0c\u5f97\u5230\u7684\u9884\u671f\u662f\u4ec0\u4e48"))),l.a.createElement("p",null,"\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"\u5355\u5143\u6d4b\u8bd5"),"\uff1a\u82f1\u6587\u662f(unit testing) \u5355,\u662f\u6307\u5bf9\u8f6f\u4ef6\u4e2d\u7684\u6700\u5c0f\u53ef\u6d4b\u8bd5\u5355\u5143\u8fdb\u884c\u68c0\u67e5\u548c\u9a8c\u8bc1\u3002\u524d\u7aef\u6240\u8bf4\u7684\u5355\u5143\u6d4b\u8bd5\u5c31\u662f\u5bf9\u4e00\u4e2a\u6a21\u5757\u8fdb\u884c\u6d4b\u8bd5\u3002\u4e5f\u5c31\u662f\u8bf4\u524d\u7aef\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u4f60\u6d4b\u8bd5\u7684\u4e1c\u897f\u4e00\u5b9a\u662f\u4e00\u4e2a\u6a21\u5757\u3002"),l.a.createElement("li",null,l.a.createElement("strong",null,"\u96c6\u6210\u6d4b\u8bd5"),"\uff1a\u4e5f\u53eb\u7ec4\u88c5\u6d4b\u8bd5\u6216\u8005\u8054\u5408\u6d4b\u8bd5\u3002\u5728\u5355\u5143\u6d4b\u8bd5\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u6240\u6709\u6a21\u5757\u6309\u7167\u6d89\u53ca\u8981\u6c42\u7ec4\u88c5\u6210\u4e3a\u5b50\u7cfb\u7edf\u6216\u7cfb\u7edf\uff0c\u8fdb\u884c\u96c6\u6210\u6d4b\u8bd5\u3002")),l.a.createElement("h2",{id:"\u5339\u914d\u5668"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u5339\u914d\u5668"},l.a.createElement("span",{className:"icon icon-link"})),"\u5339\u914d\u5668"),l.a.createElement("p",null,l.a.createElement("a",{href:"https://jestjs.io/docs/en/expect",target:"_blank",rel:"noopener noreferrer"},"Jest \u5339\u914d\u5668\u5217\u8868",l.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":!0,x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15",className:"__dumi-default-external-link-icon"},l.a.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),l.a.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})))),l.a.createElement("ul",null,l.a.createElement("li",null,"\u666e\u901a\u6bd4\u8f83",l.a.createElement("ul",null,l.a.createElement("li",null,"toBe"),l.a.createElement("li",null,"toEuqual")))),l.a.createElement("h2",{id:"\u5f02\u6b65\u4ee3\u7801"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u5f02\u6b65\u4ee3\u7801"},l.a.createElement("span",{className:"icon icon-link"})),"\u5f02\u6b65\u4ee3\u7801"),l.a.createElement("p",null,"Asynchronous Code"),l.a.createElement("ul",null,l.a.createElement("li",null,"Callback"),l.a.createElement("li",null,"Promises")),l.a.createElement("h2",{id:"\u8bbe\u7f6e\u548c\u5378\u8f7d"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u8bbe\u7f6e\u548c\u5378\u8f7d"},l.a.createElement("span",{className:"icon icon-link"})),"\u8bbe\u7f6e\u548c\u5378\u8f7d"),l.a.createElement("p",null,"\u94a9\u5b50\uff1a"),l.a.createElement("ul",null,l.a.createElement("li",null,"\u5f88\u591a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u91cd\u590d\u8bbe\u7f6e",l.a.createElement("ul",null,l.a.createElement("li",null,"beforeEach"),l.a.createElement("li",null,"afterEach"))),l.a.createElement("li",null,"\u4e00\u6b21\u8bbe\u7f6e",l.a.createElement("ul",null,l.a.createElement("li",null,"beforeAll"),l.a.createElement("li",null,"afterAll")))),l.a.createElement("h2",{id:"\u6a21\u62df\u51fd\u6570"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u6a21\u62df\u51fd\u6570"},l.a.createElement("span",{className:"icon icon-link"})),"\u6a21\u62df\u51fd\u6570"),l.a.createElement("h2",{id:"\u6307\u5f15"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u6307\u5f15"},l.a.createElement("span",{className:"icon icon-link"})),"\u6307\u5f15"),l.a.createElement("ul",null,l.a.createElement("li",null,"\u5feb\u7167\u6d4b\u8bd5 Snapshot"),l.a.createElement("li",null,"\u5b9a\u65f6\u5668\u51fd\u6570")),l.a.createElement("h2",{id:"\u547d\u4ee4\u884c\u5de5\u5177"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u547d\u4ee4\u884c\u5de5\u5177"},l.a.createElement("span",{className:"icon icon-link"})),"\u547d\u4ee4\u884c\u5de5\u5177"),l.a.createElement("p",null,l.a.createElement("a",{href:"https://jestjs.io/docs/en/cli",target:"_blank",rel:"noopener noreferrer"},"Jest CLI Options",l.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":!0,x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15",className:"__dumi-default-external-link-icon"},l.a.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),l.a.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})))),l.a.createElement("ul",null,l.a.createElement("li",null,"\u6d4b\u8bd5\u73af\u5883",l.a.createElement("ul",null,l.a.createElement("li",null,"Node"),l.a.createElement("li",null,"jsdom\uff08browser-like\uff09"))),l.a.createElement("li",null,"\u7f16\u8bd1\u4ee3\u7801",l.a.createElement("ul",null,l.a.createElement("li",null,"v8"),l.a.createElement("li",null,"babel")))),l.a.createElement("h2",{id:"\u914d\u7f6e\u6587\u4ef6"},l.a.createElement("a",{"aria-hidden":"true",href:"#\u914d\u7f6e\u6587\u4ef6"},l.a.createElement("span",{className:"icon icon-link"})),"\u914d\u7f6e\u6587\u4ef6"),l.a.createElement("p",null,l.a.createElement("a",{href:"https://jestjs.io/docs/en/configuration.html",target:"_blank",rel:"noopener noreferrer"},"Configuring Jest",l.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":!0,x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15",className:"__dumi-default-external-link-icon"},l.a.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),l.a.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})))),l.a.createElement("p",null,"babel-jest"),l.a.createElement(s.a,{code:'// For a detailed explanation regarding each configuration property, visit:\n// https://jestjs.io/docs/en/configuration.html\n\nmodule.exports = {\n  // All imported modules in your tests should be mocked automatically\n  // automock: false,\n\n  // Stop running tests after `n` failures\n  // bail: 0,\n\n  // The directory where Jest should store its cached dependency information\n  // cacheDirectory: "/private/var/folders/pv/cf9vq9sj6y32mtgw93mxjjfr0000gn/T/jest_dx",\n\n  // Automatically clear mock calls and instances between every test\n  clearMocks: true,\n\n  // Indicates whether the coverage information should be collected while executing the test\n  // collectCoverage: false,\n\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\n  // collectCoverageFrom: undefined,\n\n  // The directory where Jest should output its coverage files\n  coverageDirectory: \'coverage\',\n\n  // An array of regexp pattern strings used to skip coverage collection\n  // coveragePathIgnorePatterns: [\n  //   "/node_modules/"\n  // ],\n\n  // Indicates which provider should be used to instrument code for coverage\n  // coverageProvider: "babel",\n\n  // A list of reporter names that Jest uses when writing coverage reports\n  // coverageReporters: [\n  //   "json",\n  //   "text",\n  //   "lcov",\n  //   "clover"\n  // ],\n\n  // An object that configures minimum threshold enforcement for coverage results\n  // coverageThreshold: undefined,\n\n  // A path to a custom dependency extractor\n  // dependencyExtractor: undefined,\n\n  // Make calling deprecated APIs throw helpful error messages\n  // errorOnDeprecated: false,\n\n  // Force coverage collection from ignored files using an array of glob patterns\n  // forceCoverageMatch: [],\n\n  // A path to a module which exports an async function that is triggered once before all test suites\n  // globalSetup: undefined,\n\n  // A path to a module which exports an async function that is triggered once after all test suites\n  // globalTeardown: undefined,\n\n  // A set of global variables that need to be available in all test environments\n  // globals: {},\n\n  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n  // maxWorkers: "50%",\n\n  // An array of directory names to be searched recursively up from the requiring module\'s location\n  // moduleDirectories: [\n  //   "node_modules"\n  // ],\n\n  // An array of file extensions your modules use\n  // moduleFileExtensions: [\n  //   "js",\n  //   "json",\n  //   "jsx",\n  //   "ts",\n  //   "tsx",\n  //   "node"\n  // ],\n\n  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n  // moduleNameMapper: {},\n\n  // An array of regexp pattern strings, matched against all module paths before considered \'visible\' to the module loader\n  // modulePathIgnorePatterns: [],\n\n  // Activates notifications for test results\n  // notify: false,\n\n  // An enum that specifies notification mode. Requires { notify: true }\n  // notifyMode: "failure-change",\n\n  // A preset that is used as a base for Jest\'s configuration\n  // preset: undefined,\n\n  // Run tests from one or more projects\n  // projects: undefined,\n\n  // Use this configuration option to add custom reporters to Jest\n  // reporters: undefined,\n\n  // Automatically reset mock state between every test\n  // resetMocks: false,\n\n  // Reset the module registry before running each individual test\n  // resetModules: false,\n\n  // A path to a custom resolver\n  // resolver: undefined,\n\n  // Automatically restore mock state between every test\n  // restoreMocks: false,\n\n  // The root directory that Jest should scan for tests and modules within\n  // rootDir: undefined,\n\n  // A list of paths to directories that Jest should use to search for files in\n  // roots: [\n  //   "<rootDir>"\n  // ],\n\n  // Allows you to use a custom runner instead of Jest\'s default test runner\n  // runner: "jest-runner",\n\n  // The paths to modules that run some code to configure or set up the testing environment before each test\n  // setupFiles: [],\n\n  // A list of paths to modules that run some code to configure or set up the testing framework before each test\n  // setupFilesAfterEnv: [],\n\n  // The number of seconds after which a test is considered as slow and reported as such in the results.\n  // slowTestThreshold: 5,\n\n  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n  // snapshotSerializers: [],\n\n  // The test environment that will be used for testing\n  // testEnvironment: "jest-environment-jsdom",\n\n  // Options that will be passed to the testEnvironment\n  // testEnvironmentOptions: {},\n\n  // Adds a location field to test results\n  // testLocationInResults: false,\n\n  // The glob patterns Jest uses to detect test files\n  // testMatch: [\n  //   "**/__tests__/**/*.[jt]s?(x)",\n  //   "**/?(*.)+(spec|test).[tj]s?(x)"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n  // testPathIgnorePatterns: [\n  //   "/node_modules/"\n  // ],\n\n  // The regexp pattern or array of patterns that Jest uses to detect test files\n  // testRegex: [],\n\n  // This option allows the use of a custom results processor\n  // testResultsProcessor: undefined,\n\n  // This option allows use of a custom test runner\n  // testRunner: "jasmine2",\n\n  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n  // testURL: "http://localhost",\n\n  // Setting this value to "fake" allows the use of fake timers for functions such as "setTimeout"\n  // timers: "real",\n\n  // A map from regular expressions to paths to transformers\n  // transform: undefined,\n\n  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n  // transformIgnorePatterns: [\n  //   "/node_modules/"\n  // ],\n\n  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n  // unmockedModulePathPatterns: undefined,\n\n  // Indicates whether each individual test should be reported during the run\n  // verbose: undefined,\n\n  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n  // watchPathIgnorePatterns: [],\n\n  // Whether to use watchman for file crawling\n  // watchman: true,\n};\n',lang:"js"})))}}}]);